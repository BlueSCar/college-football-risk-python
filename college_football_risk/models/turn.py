# coding: utf-8

"""
    College Football Risk API

    Companion API for College Football Risk  # noqa: E501

    The version of the OpenAPI document: 1.1.1
    Contact: admin@collegefootballdata.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from college_football_risk.configuration import Configuration


class Turn(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'season': 'int',
        'day': 'int',
        'complete': 'bool',
        'active': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'season': 'season',
        'day': 'day',
        'complete': 'complete',
        'active': 'active'
    }

    def __init__(self, id=None, season=None, day=None, complete=None, active=None, local_vars_configuration=None):  # noqa: E501
        """Turn - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._season = None
        self._day = None
        self._complete = None
        self._active = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if season is not None:
            self.season = season
        if day is not None:
            self.day = day
        if complete is not None:
            self.complete = complete
        if active is not None:
            self.active = active

    @property
    def id(self):
        """Gets the id of this Turn.  # noqa: E501


        :return: The id of this Turn.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Turn.


        :param id: The id of this Turn.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def season(self):
        """Gets the season of this Turn.  # noqa: E501


        :return: The season of this Turn.  # noqa: E501
        :rtype: int
        """
        return self._season

    @season.setter
    def season(self, season):
        """Sets the season of this Turn.


        :param season: The season of this Turn.  # noqa: E501
        :type: int
        """

        self._season = season

    @property
    def day(self):
        """Gets the day of this Turn.  # noqa: E501


        :return: The day of this Turn.  # noqa: E501
        :rtype: int
        """
        return self._day

    @day.setter
    def day(self, day):
        """Sets the day of this Turn.


        :param day: The day of this Turn.  # noqa: E501
        :type: int
        """

        self._day = day

    @property
    def complete(self):
        """Gets the complete of this Turn.  # noqa: E501


        :return: The complete of this Turn.  # noqa: E501
        :rtype: bool
        """
        return self._complete

    @complete.setter
    def complete(self, complete):
        """Sets the complete of this Turn.


        :param complete: The complete of this Turn.  # noqa: E501
        :type: bool
        """

        self._complete = complete

    @property
    def active(self):
        """Gets the active of this Turn.  # noqa: E501


        :return: The active of this Turn.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Turn.


        :param active: The active of this Turn.  # noqa: E501
        :type: bool
        """

        self._active = active

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Turn):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Turn):
            return True

        return self.to_dict() != other.to_dict()
