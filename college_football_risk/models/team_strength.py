# coding: utf-8

"""
    College Football Risk API

    Companion API for College Football Risk  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: admin@collegefootballdata.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from college_football_risk.configuration import Configuration


class TeamStrength(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'team': 'str',
        'players': 'int',
        'mercs': 'int',
        'stars': 'int',
        'territories': 'int'
    }

    attribute_map = {
        'team': 'team',
        'players': 'players',
        'mercs': 'mercs',
        'stars': 'stars',
        'territories': 'territories'
    }

    def __init__(self, team=None, players=None, mercs=None, stars=None, territories=None, local_vars_configuration=None):  # noqa: E501
        """TeamStrength - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._team = None
        self._players = None
        self._mercs = None
        self._stars = None
        self._territories = None
        self.discriminator = None

        if team is not None:
            self.team = team
        if players is not None:
            self.players = players
        if mercs is not None:
            self.mercs = mercs
        if stars is not None:
            self.stars = stars
        if territories is not None:
            self.territories = territories

    @property
    def team(self):
        """Gets the team of this TeamStrength.  # noqa: E501


        :return: The team of this TeamStrength.  # noqa: E501
        :rtype: str
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this TeamStrength.


        :param team: The team of this TeamStrength.  # noqa: E501
        :type: str
        """

        self._team = team

    @property
    def players(self):
        """Gets the players of this TeamStrength.  # noqa: E501


        :return: The players of this TeamStrength.  # noqa: E501
        :rtype: int
        """
        return self._players

    @players.setter
    def players(self, players):
        """Sets the players of this TeamStrength.


        :param players: The players of this TeamStrength.  # noqa: E501
        :type: int
        """

        self._players = players

    @property
    def mercs(self):
        """Gets the mercs of this TeamStrength.  # noqa: E501


        :return: The mercs of this TeamStrength.  # noqa: E501
        :rtype: int
        """
        return self._mercs

    @mercs.setter
    def mercs(self, mercs):
        """Sets the mercs of this TeamStrength.


        :param mercs: The mercs of this TeamStrength.  # noqa: E501
        :type: int
        """

        self._mercs = mercs

    @property
    def stars(self):
        """Gets the stars of this TeamStrength.  # noqa: E501


        :return: The stars of this TeamStrength.  # noqa: E501
        :rtype: int
        """
        return self._stars

    @stars.setter
    def stars(self, stars):
        """Sets the stars of this TeamStrength.


        :param stars: The stars of this TeamStrength.  # noqa: E501
        :type: int
        """

        self._stars = stars

    @property
    def territories(self):
        """Gets the territories of this TeamStrength.  # noqa: E501


        :return: The territories of this TeamStrength.  # noqa: E501
        :rtype: int
        """
        return self._territories

    @territories.setter
    def territories(self, territories):
        """Sets the territories of this TeamStrength.


        :param territories: The territories of this TeamStrength.  # noqa: E501
        :type: int
        """

        self._territories = territories

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TeamStrength):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TeamStrength):
            return True

        return self.to_dict() != other.to_dict()
