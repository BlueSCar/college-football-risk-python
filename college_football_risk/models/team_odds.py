# coding: utf-8

"""
    College Football Risk API

    Companion API for College Football Risk  # noqa: E501

    The version of the OpenAPI document: 1.4.0
    Contact: admin@collegefootballdata.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from college_football_risk.configuration import Configuration


class TeamOdds(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'territory': 'str',
        'owner': 'str',
        'players': 'int',
        'star_breakdown': 'TeamHistoryStarBreakdown',
        'team_power': 'float',
        'territory_power': 'float',
        'chance': 'float'
    }

    attribute_map = {
        'territory': 'territory',
        'owner': 'owner',
        'players': 'players',
        'star_breakdown': 'starBreakdown',
        'team_power': 'teamPower',
        'territory_power': 'territoryPower',
        'chance': 'chance'
    }

    def __init__(self, territory=None, owner=None, players=None, star_breakdown=None, team_power=None, territory_power=None, chance=None, local_vars_configuration=None):  # noqa: E501
        """TeamOdds - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._territory = None
        self._owner = None
        self._players = None
        self._star_breakdown = None
        self._team_power = None
        self._territory_power = None
        self._chance = None
        self.discriminator = None

        if territory is not None:
            self.territory = territory
        if owner is not None:
            self.owner = owner
        if players is not None:
            self.players = players
        if star_breakdown is not None:
            self.star_breakdown = star_breakdown
        if team_power is not None:
            self.team_power = team_power
        if territory_power is not None:
            self.territory_power = territory_power
        if chance is not None:
            self.chance = chance

    @property
    def territory(self):
        """Gets the territory of this TeamOdds.  # noqa: E501


        :return: The territory of this TeamOdds.  # noqa: E501
        :rtype: str
        """
        return self._territory

    @territory.setter
    def territory(self, territory):
        """Sets the territory of this TeamOdds.


        :param territory: The territory of this TeamOdds.  # noqa: E501
        :type: str
        """

        self._territory = territory

    @property
    def owner(self):
        """Gets the owner of this TeamOdds.  # noqa: E501


        :return: The owner of this TeamOdds.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this TeamOdds.


        :param owner: The owner of this TeamOdds.  # noqa: E501
        :type: str
        """

        self._owner = owner

    @property
    def players(self):
        """Gets the players of this TeamOdds.  # noqa: E501


        :return: The players of this TeamOdds.  # noqa: E501
        :rtype: int
        """
        return self._players

    @players.setter
    def players(self, players):
        """Sets the players of this TeamOdds.


        :param players: The players of this TeamOdds.  # noqa: E501
        :type: int
        """

        self._players = players

    @property
    def star_breakdown(self):
        """Gets the star_breakdown of this TeamOdds.  # noqa: E501


        :return: The star_breakdown of this TeamOdds.  # noqa: E501
        :rtype: TeamHistoryStarBreakdown
        """
        return self._star_breakdown

    @star_breakdown.setter
    def star_breakdown(self, star_breakdown):
        """Sets the star_breakdown of this TeamOdds.


        :param star_breakdown: The star_breakdown of this TeamOdds.  # noqa: E501
        :type: TeamHistoryStarBreakdown
        """

        self._star_breakdown = star_breakdown

    @property
    def team_power(self):
        """Gets the team_power of this TeamOdds.  # noqa: E501


        :return: The team_power of this TeamOdds.  # noqa: E501
        :rtype: float
        """
        return self._team_power

    @team_power.setter
    def team_power(self, team_power):
        """Sets the team_power of this TeamOdds.


        :param team_power: The team_power of this TeamOdds.  # noqa: E501
        :type: float
        """

        self._team_power = team_power

    @property
    def territory_power(self):
        """Gets the territory_power of this TeamOdds.  # noqa: E501


        :return: The territory_power of this TeamOdds.  # noqa: E501
        :rtype: float
        """
        return self._territory_power

    @territory_power.setter
    def territory_power(self, territory_power):
        """Sets the territory_power of this TeamOdds.


        :param territory_power: The territory_power of this TeamOdds.  # noqa: E501
        :type: float
        """

        self._territory_power = territory_power

    @property
    def chance(self):
        """Gets the chance of this TeamOdds.  # noqa: E501


        :return: The chance of this TeamOdds.  # noqa: E501
        :rtype: float
        """
        return self._chance

    @chance.setter
    def chance(self, chance):
        """Sets the chance of this TeamOdds.


        :param chance: The chance of this TeamOdds.  # noqa: E501
        :type: float
        """

        self._chance = chance

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TeamOdds):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TeamOdds):
            return True

        return self.to_dict() != other.to_dict()
