# coding: utf-8

"""
    College Football Risk API

    Companion API for College Football Risk  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: admin@collegefootballdata.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from college_football_risk.configuration import Configuration


class TerritoryTurn(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'occupier': 'str',
        'winner': 'str',
        'teams': 'list[TerritoryTurnTeams]',
        'players': 'list[TerritoryTurnPlayers]'
    }

    attribute_map = {
        'occupier': 'occupier',
        'winner': 'winner',
        'teams': 'teams',
        'players': 'players'
    }

    def __init__(self, occupier=None, winner=None, teams=None, players=None, local_vars_configuration=None):  # noqa: E501
        """TerritoryTurn - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._occupier = None
        self._winner = None
        self._teams = None
        self._players = None
        self.discriminator = None

        if occupier is not None:
            self.occupier = occupier
        if winner is not None:
            self.winner = winner
        if teams is not None:
            self.teams = teams
        if players is not None:
            self.players = players

    @property
    def occupier(self):
        """Gets the occupier of this TerritoryTurn.  # noqa: E501


        :return: The occupier of this TerritoryTurn.  # noqa: E501
        :rtype: str
        """
        return self._occupier

    @occupier.setter
    def occupier(self, occupier):
        """Sets the occupier of this TerritoryTurn.


        :param occupier: The occupier of this TerritoryTurn.  # noqa: E501
        :type: str
        """

        self._occupier = occupier

    @property
    def winner(self):
        """Gets the winner of this TerritoryTurn.  # noqa: E501


        :return: The winner of this TerritoryTurn.  # noqa: E501
        :rtype: str
        """
        return self._winner

    @winner.setter
    def winner(self, winner):
        """Sets the winner of this TerritoryTurn.


        :param winner: The winner of this TerritoryTurn.  # noqa: E501
        :type: str
        """

        self._winner = winner

    @property
    def teams(self):
        """Gets the teams of this TerritoryTurn.  # noqa: E501


        :return: The teams of this TerritoryTurn.  # noqa: E501
        :rtype: list[TerritoryTurnTeams]
        """
        return self._teams

    @teams.setter
    def teams(self, teams):
        """Sets the teams of this TerritoryTurn.


        :param teams: The teams of this TerritoryTurn.  # noqa: E501
        :type: list[TerritoryTurnTeams]
        """

        self._teams = teams

    @property
    def players(self):
        """Gets the players of this TerritoryTurn.  # noqa: E501


        :return: The players of this TerritoryTurn.  # noqa: E501
        :rtype: list[TerritoryTurnPlayers]
        """
        return self._players

    @players.setter
    def players(self, players):
        """Sets the players of this TerritoryTurn.


        :param players: The players of this TerritoryTurn.  # noqa: E501
        :type: list[TerritoryTurnPlayers]
        """

        self._players = players

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TerritoryTurn):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TerritoryTurn):
            return True

        return self.to_dict() != other.to_dict()
